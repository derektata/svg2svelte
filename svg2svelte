#!/usr/bin/env sh
set -eu
command -v svgo >/dev/null 2>&1 || { echo >&2 "I require svgo but it's not installed.  Aborting."; exit 1; }

if [ $# -eq 0 ]; then echo "Usage: svg2svelte <svg_file>"; exit 1; fi
if [ "${1##*.}" != "svg" ]; then echo "Error: File must be an SVG"; exit 1; fi
base=$(basename "$1" .svg)
capitolized=$(echo "$base" | sed 's/\([[:alpha:]]\)/\U\1/')
svelte_file="$capitolized.svelte"
cp "$1" "$1.bak" # back up the file, so we don't destroy the original

ids=$(grep -o 'id="[^"]*"' "$1.bak" | sed 's/id="//g' | sed 's/"//g')
bind_ids=$(echo "$ids" | grep -o 'bind:.*' | sed 's/bind://g' | sed 's/://g')
vars=$(echo "$bind_ids" | tr '\n' ', ' | sed 's/,/, /g' | sed 's/, $//')
minified="$(basename "$1" .svg).min.svg"

# Strip the bind: keywords from the backup
for id in $bind_ids; do sed -i "s/id=\"bind:$id\"/id=\"$id\"/g" "$1.bak"; done
# Change ids to classes
sed -i "s/id=\"/class=\"/g" "$1.bak"
# Minify the backed up file
svgo "$1.bak" -o "$minified" -q --pretty
# Create component
touch "$svelte_file"
# Add script tag and variables
printf "<script>\n\tlet %s;\n</script>\n\n" "$vars" >> "$svelte_file"
# Add the minified SVG data to the component
cat "$minified" >> "$svelte_file"
# Add the svelte bindings to the tags
for id in $bind_ids; do
    sed -i "s/class=\"$id\"/class=\"$id\" bind:this={$id}/g" "$svelte_file"
done

# Cleanup & exit
rm "$1.bak" "$minified"
exit 0
